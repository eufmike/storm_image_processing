#%% [markdown]
# # Analysis 20190419
# * Written by: Chien-Cheng Shih
# * Running under conda env "lipidraft"
# * Source Images: testdata

#%%
# import resource
import subprocess
import os, sys
from core.fileop import DirCheck, ListFiles, GetPendingList, GetGrpFLs

#Functions ---------------------------------------------------------------
def dict2arg_fiji(arg):
    arg_str = str()
    for key, val in arg.items():
        str_tmp = str(key + '="' + val + '", ')
        arg_str = arg_str + str_tmp
    return arg_str

def list2arg_python(arg):
    arg_str = str()
    for var in arg:
        arg_str = arg_str +  "'" + str(var) + "' " 
    return arg_str

def list2arg_matlab(arg):
    arg_str = str()
    for i in range(len(arg)-1):
        arg_str = arg_str +  "'" + str(arg[i]) + "', " 
    arg_str = arg_str +  "'" + str(arg[-1]) + "'" 
    return arg_str
# -------------------------------------------------------------------------

#%% [markdown]
# ## Specify Parameters
# * `fiji`: path to the fiji application
# * `codepath`: the workspace for code/script
# * `datapath`: the workspace for STORM images and data
# * `analysis_dir`: the folder hosting data and images generated from this pipeline
#%%
fiji = '/Applications/Fiji.app/Contents/MacOS/ImageJ-macosx'
matlab = '/Applications/MATLAB_R2017b.app/bin/matlab'
codepath = '/Users/michaelshih/Documents/code/wucci/storm_image_processing'
datapath = '/Volumes/LaCie_DataStorage/xiaochao_wei_STORM imaging/STORM_imaging'
analysis_dir = 'analysis_20190419'

#%% [markdown]
# ## Script name: `imgproc.py` 
# * env: ImageJ/Fiji
# * rewritten: 04/26/2019
# * verified 
# * output folder: `preprocessing`
# ### Output
#   1. `preproimg` (`.tif`): seperate the channels into individual folders 
#   2. `imgintensity` (`.csv`): return mean intensity for each time frame from the center of the image (128 pixel * 128 pixel)
#   3. `imginfo`:
#       1. `imgmetadata` (`.txt`): return the metadata
#       2. `imgstat.csv`: statistics from images
#           * image_name: the name of the image without extension
#           * ip_file_name: the name of the image with extension
#           * xSize: frame size on the x-axis
#           * ySize: frame size on the y-axis
#           * nSlices: frame size on the z-axis
#           * nFrames: number of time frames
#           * nChannels: number of channles
#           * size_MB: size of the file
#%%
script_name = 'imgproc.py'
ippath = '/Volumes/LaCie_DataStorage/xiaochao_wei_STORM imaging/STORM_imaging/resource/testdata'
opdir = 'preprocessing'
oppath = os.path.join(datapath, analysis_dir, opdir)

# create dict to store parameters
arg_dict = {
    'path': datapath,
    'dir_output': analysis_dir,
    'ippath': ippath,
    'outputdir': oppath,
    'batchmodeop': 'false',
}

arg = dict2arg_fiji(arg_dict)
print(arg)
#%%
# Run the script
#%%
subdir = 'Fiji'
scriptpath = os.path.join(codepath, subdir, script_name)
print("Start running: {}".format(script_name))
subprocess.check_output([fiji, '--ij2', '--run', arg])
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `tstormanalysis.py` 
# * env: ImageJ/Fiji
# * plugin: [ThunderSTORM](https://github.com/zitmen/thunderstorm)
# * rewritten: 04/26/2019
# * verified 
# * output folder: `tstorm`
# ### Output generated by ThunderSTORM
#   1. `csvdata`: 
#       * (`.csv`): STORM dataset
#       * (`.txt`): protocol
#   2. `driftcorr` (`.json`): drift correction profile 
#   3. `histogram_plot` (`.tif`): histogram image with manification = 5.0
#%%
script_name = 'tstormanalysis.py'
ippath = '/Volumes/LaCie_DataStorage/xiaochao_wei_STORM imaging/STORM_imaging/analysis_20190419/preprocessing/preproimg'
opdir = 'preprocessing'
opsubdir = 'preproimg'

arg_dict = {
    'path': datapath,
    'dir_output': analysis_dir,
    'ippath': ippath,
    'batchmodeop': 'false', 
}
arg = dict2arg_fiji(arg_dict)
print(arg)

#%%
subdir = 'Fiji'
scriptpath = os.path.join(codepath, subdir, script_name)
print("Start running: {}".format(script_name))
subprocess.check_output([fiji, '--ij2', '--run', scriptpath, arg])
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `csv_slicer_T.py` 
# * env: Python
# * rewritten: 04/26/2019
# * verified 
# * output folder: `csvdata_sliced`
# ### Output generated by ThunderSTORM
#   * `csvdata_sliced_T` (`.csv`): STORM data from T0 to T1
#%%
script_name = 'csv_slicer_T.py'
nchannel = 2
T0 = 5000
T1 = 10001
arg_list = [datapath, analysis_dir,'tstorm','csvdata', nchannel, T0, T1, 'csvdata_sliced_T']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
shellcmd = str('python '+ os.path.join(codepath, script_name)+ ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `csv_slicer_ROI.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `csvdata_sliced`
# ### Output generated by ThunderSTORM
#   * `csvdata_sliced_T_ROI` (`.csv`): STORM data cropped by given region of interest. 

#%%
# csv_slicer_crop.py
script_name = 'csv_slicer_ROI.py'
arg_list = [datapath, analysis_dir,'tstorm','csvdata_sliced_T', 2, 3, 'csvdata_sliced_T_ROI']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
shellcmd = str('python '+ os.path.join(codepath, script_name)+ ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `spatialanaylsis.R` 
# * env: R
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test`
### R, Spatstat
#   * `spacialdata` (`.csv`): Results of Ripley's K 
#       * K_r: Ripley's K function $$\hat{K}(r)= \hat{\lambda}^{-1}\sum_{i}\sum_{j\neq1}\frac{\omega(l_i, l_j)I(d_{ij<r})}{N}$$
#       * L_r: L-function $$\hat{L}(r)=\sqrt{\frac{\hat{K}(r)}{\pi}}$$
#       * H_r: H-function $$\hat{H}(r)=\hat{L}(r)-r$$
#   * `spacialdata_bi` (`.rda`): binary point pattern data
#%%
# spatialanaylsis.R
script_name = 'spatialanaylsis.R'
arg_list = [datapath, analysis_dir,'tstorm','csvdata_sliced_T_ROI', 2, 3, 'spacial_test', 'spacialdata', 'spacialdata_bi']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
shellcmd = str('Rscript --vanilla '+ os.path.join(codepath, script_name)+ ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `plot_spatialdata.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test`
# ### Output generated by ThunderSTORM
#   * `plot_K` (`.png`): Plot for r and K_r 
#   * `plot_L` (`.png`): Plot for r and L_r 
#   * `plot_H` (`.png`): Plot for r and H_r 
#   * `plot_total` (`.png`): 
#       * {function}_all_c{channel}.png: plots including all data in the given function (by files)
#       * {function}_merge_c{channel}.png: plots including average data in the given function (by files)

#%%
script_name = 'plot_spatialdata.py'
arg_list = [datapath, analysis_dir,'spacial_test','spacialdata', 2, 'plot']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
shellcmd = str('python '+ os.path.join(codepath, script_name)+ ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: 'csv_slicer_ROI_pad.py' 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `csvdata_sliced_pad`
# ### Output generated by ThunderSTORM
#   * `csvdata_sliced_T_ROI_pad` (`.csv`): STORM data cropped by given region of interest with defined pad region 
#%%
# csv_slicer_ROI_pad.py
script_name = 'csv_slicer_ROI_pad.py'
arg_list = [datapath, analysis_dir,'tstorm','csvdata_sliced_T', 2, 3, 3, 'csvdata_sliced_T_ROI_pad']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
shellcmd = str('python '+ os.path.join(codepath, script_name)+ ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `spatialanaylsis_localL_pad.R` 
# * env: R
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test`
### R, Spatstat
#   * `spacialdata` (`.csv`): Results of Ripley's K 
#       * K_r: Ripley's K function $$\hat{K}(r)= \hat{\lambda}^{-1}\sum_{i}\sum_{j\neq1}\frac{\omega(l_i, l_j)I(d_{ij<r})}{N}$$
#       * L_r: L-function $$\hat{L}(r)=\sqrt{\frac{\hat{K}(r)}{\pi}}$$
#       * H_r: H-function $$\hat{H}(r)=\hat{L}(r)-r$$
#   * `spacialdata_bi` (`.rda`): binary point pattern data

#%%
# spatialanaylsis.R
script_name = 'spatialanaylsis_localL.R'
arg_list = [datapath, analysis_dir,'tstorm','csvdata_sliced_T_ROI_pad', 2, 3, 'spacial_test', 'spacialdata_local']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
shellcmd = str('Rscript --vanilla '+ os.path.join(codepath, script_name)+ ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `localL_interpolation_pad.m` 
# * env: MATLAB
# * rewritten: 04/29/2019
# * verified 
# <br />
# * Method: MATLAB, griddata, 'v4': Biharmonic spline interpolation (MATLABÂ® 4 griddata method) 
# supporting 2-D interpolation only. Unlike the other methods, this interpolation is not based on a triangulation.
# * output folder: `spacialdata_pad_local_int`

#%%
script_name = 'localL_interpolation_pad.m'
arg_list = [codepath, datapath, analysis_dir, 'spacial_test', 'spacialdata_local', 'spacialdata_pad_local_int', 'par', 'cropsize.csv', 160, 30, 3]
arg = list2arg_matlab(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
matlabfunc = script_name.replace('.m', '')
shellcmd = str(matlab + ' -r '+ '"' + matlabfunc + "(" + arg + ')"')
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `plot_localL_pad.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test`
# ### Output generated by ThunderSTORM
#   1. 'plot_local_pad_scatter': scatter plot (with denisty in LUT)  
#   2. 'plot_local_pad_grid': interpolated image (frame size: 480 * 480)

#%%
script_name = 'plot_localL_pad.py'
arg_list = [datapath, analysis_dir,'tstorm','spacial_test','spacialdata_local', 'spacialdata_pad_local_int',  2, 3, 3, 'plot_local_pad_scatter', 'plot_local_pad_grid']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
scriptpath = os.path.join(codepath, script_name)
shellcmd = str('python '+ scriptpath + ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `grid_cluster_analysis.py` 
# * env: ImageJ/Fiji
# * rewritten: 04/26/2019
# * verified 
# * output folder: `tstorm`
# ### Output generated by ThunderSTORM
#   1. `int_grid_bi` (`.tif`): segemented image with clusters
#   2. `int_grid_data` (`.csv`): label measurment from clusters

#%% 
script_name = 'grid_cluster_analysis.py'
ippath = os.path.join(datapath, analysis_dir, 'spacial_test', 'plot_local_pad_grid')
opsub_dir = os.path.join('spacial_test', 'nnd')
op_bi_path = os.path.join(datapath, analysis_dir, opsub_dir, 'int_grid_bi')
op_data_path = os.path.join(datapath, analysis_dir, opsub_dir, 'int_grid_data')

arg_dict = {
    'path_j': datapath,
    'dir_output': analysis_dir,
    'ippath_j': ippath,
    'op_bi_path_j': op_bi_path,
    'op_data_path_j': op_data_path,
    'batchmodeop': 'false', 
}
arg = dict2arg_fiji(arg_dict)
print(arg)

#%%
subdir = 'Fiji'
scriptpath = os.path.join(codepath, subdir, script_name)
print("Start running: {}".format(script_name))
subprocess.check_output([fiji, '--ij2', '--run', scriptpath, arg])
print("End: {}".format(script_name))

#%% [markdown]
# ## Script name: `plot_localL_pad.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test`
# ### Output generated by ThunderSTORM
#   1. 'plot_local_pad_scatter': scatter plot (with denisty in LUT)  
#   2. 'plot_local_pad_grid': interpolated image (frame size: 480 * 480)

#%%
script_name = 'plot_localL_pad.py'
arg_list = [datapath, analysis_dir,'tstorm','spacial_test','spacialdata_local', 'spacialdata_pad_local_int',  2, 3, 3, 'plot_local_pad_scatter', 'plot_local_pad_grid']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
scriptpath = os.path.join(codepath, script_name)
shellcmd = str('python '+ scriptpath + ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))


#%% [markdown]
# ## Script name: `nnd_filter.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test/nnd`
# ### Output generated by ThunderSTORM
#   1. 'int_grid_data_filtered': filter data (by area and circularity)
#   2. 'int_grid_data_summary': histogram by area

#%%
script_name = 'nnd_cluster_prefilter.py'
arg_list = [datapath, analysis_dir,'tstorm','spacial_test','nnd', 'int_grid_data',  2, 3, 3, 'int_grid_data_summary', 'int_grid_data_filtered']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
scriptpath = os.path.join(codepath, script_name)
shellcmd = str('python '+ scriptpath + ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

# ## Script name: `nnd_cluster_analysis.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test/nnd`
# ### Output generated by ThunderSTORM
#   * 'int_grid_data_dist': data of nnd processing

#%%
script_name = 'nnd_cluster_analysis.py'
arg_list = [datapath, analysis_dir,'tstorm','spacial_test','nnd', 'int_grid_data_filtered',  2, 3, 3, 'int_grid_data_dist']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
scriptpath = os.path.join(codepath, script_name)
shellcmd = str('python '+ scriptpath + ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))

# ## Script name: `nnd_plot.py` 
# * env: Python
# * rewritten: 04/29/2019
# * verified 
# * output folder: `spacial_test/nnd`
# ### Output generated by ThunderSTORM
#   * 'int_grid_data_dist': 

#%%
script_name = 'nnd_plot.py'
arg_list = [datapath, analysis_dir,'tstorm','spacial_test','nnd', 'int_grid_data_dist',  2, 3, 3, 0.01, 'int_grid_data_nndplot']
arg = list2arg_python(arg_list)
print(arg)

#%%
print("Start running: {}".format(script_name))
scriptpath = os.path.join(codepath, script_name)
shellcmd = str('python '+ scriptpath + ' '+ arg)
print(shellcmd)
process = subprocess.run(shellcmd, shell = True, check=True)
print("End: {}".format(script_name))



#%% [markdown]
# ## Script name: `CBC.py` 
# * env: ImageJ/Fiji
# * plugin: [ThunderSTORM](https://github.com/zitmen/thunderstorm)
# * rewritten: 04/29/2019
# * verified 
# * output folder: `tstorm`
# ### Output generated by ThunderSTORM
#   1. `csvdata`: 
#       * (`.csv`): STORM dataset
#       * (`.txt`): protocol
#   2. `driftcorr` (`.json`): drift correction profile 
#   3. `histogram_plot` (`.tif`): histogram image with manification = 5.0

#%%
script_name = 'CBC.py'
ippath = '/Volumes/LaCie_DataStorage/xiaochao_wei_STORM imaging/STORM_imaging/analysis_20190419/preprocessing/preproimg'
opdir = 'preprocessing'
opsubdir = 'preproimg'

arg_dict = {
    'path': datapath,
    'dir_output': analysis_dir,
    'ippath': ippath,
    'batchmodeop': 'false', 
}
arg = dict2arg_fiji(arg_dict)
print(arg)

#%%
subdir = 'Fiji'
scriptpath = os.path.join(codepath, subdir, script_name)
print("Start running: {}".format(script_name))
subprocess.check_output([fiji, '--ij2', '--run', scriptpath, arg])
print("End: {}".format(script_name))