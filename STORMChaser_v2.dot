digraph STROM_Chaser{
    // Config the working layout
    graph [fontname = "helvetica"];
    node [fontname = "helvetica"];
    edge [fontname = "helvetica"];
    // Style of edge
    splines = ortho;

    //nodes
    //preprocessing
    rawimg [label= "STORM Image \n(.nd2)"];
    img_prepro [label = <<B>Fiji</B><br />Image Processing<br />1. Split channel<br />2. Export stats<br />(imgproc.py)>, 
                shape = box, style=filled;
                color=lightblue];
    preproimg [label = "proproimg(.tif)\n./preproimg"];
    imgintensity [label = "imgintensity(.csv)\n./imgintensity"];
    imgmetadata [label = "imgmetadata\n./imginfo/imgmetadata"];
    imgstat [label = "imgstat (.csv)\n./imginfo/"];
   
    //tSTORM analysis
    tstormanalysis [label = <<B>Fiji</B><br />ThunderSTORM<br />Run STORM Analysis<br />(tstormanalysis.py)>, 
                    shape = box, style=filled,
                    color=lightblue];
    STORMdata [label="STORM_data\n(.csv)\n./tstorm/csvdata"];
    slicer_t [label = <<B>Python</B><br />Sliced by T<br />(csv_slicer.py)>, 
                shape = box, style=filled,
                color=PaleGreen];
    STORMdata_sliced_T [label = "STORM_data\nsliced_T\n./csvdata_sliced"];
    cropsize [label = "cropsize\nmanual defined\n./par/cropsize.csv"]
    slicer_r [label = <<B>Python</B><br />Sliced by R<br />3 regions per img<br />(csv_slicer_crop.py)>, 
                shape = box, style=filled,
                color=PaleGreen];
    STORMdata_sliced_R [label = "STORM_data\nsliced_R\n./csvdata_crop"];
    
    //spacial analysis
    spatialanalysis [label = <<B>R</B><br />Spatial Analysis<br />spatstat, K, L, H<br />(spatialanalysis.R)>, 
                        shape = box, style=filled,
                        color=sandybrown];
    spatialdata [label = "spatialdata\n(.csv)\n Var: K_r, L_r, H_r\n./spacialdata"];
    spatialdata_bi [label = "spatialdata_bi\n(.rda)\n./spacialdata_bi"];

    //spacial analysis plot
    plot_spatialdata [label = <<B>Python</B><br />Plot spatialdata<br />(plot_spatialdata.py)>, 
                        shape = box, style=filled,
                        color=PaleGreen];
    plot_K [label = "Plot K_r\n(.png)\n./plot_K"];
    plot_L [label = "Plot L_r\n(.png)\n./plot_L"];
    plot_H [label = "Plot H_r\n(.png)\n./plot_H"];
    plot_total [label = "Plot Summary\n(.png)\n./plot_total"];
    
    //CBC analysis
    CBC_analysis [label = <<B>Fiji</B><br />CBC Analysis<br />(CBC.py)>, 
                    shape = box, style=filled,
                    color=lightblue];
    CBC_results [label = "CBC results\n.csv\n.CBC_results"]
    //data inference
    data_inference_photon [label = <<B>Python</B><br />data_inf<br />photon<br />(data_inference_photon.py)>, 
                            shape = box, style=filled,
                            color=PaleGreen];
    photons_hist [label = "photon histo\n./photons_hist"]
    photons_hist_summary [label = "photon histo\nsummary\n./photons_hist"]
    data_inference_cbc [label = <<B>Python</B><br />data_inf<br />CBC<br />(data_inference_cbc.py)>, 
                            shape = box, style=filled,
                            color=PaleGreen];
    CBC_histogram [label = "CBC Histo\n./CBC_histogram"]
    CBC_histogram_summary [label = "CBC Histo\n./CBC_histogram_summary"]
    //filter data with threshold and make plot
    slicer_threshold [label = <<B>Python</B><br />Sliced by Threshould<br />(.csv)<br />(csv_slicer_crop.py)>, 
                        shape = box, style=filled,
                        color=PaleGreen];
    STORMdata_sliced_th [label = "STORM_data\nsliced_Threshold\n./csvdata_crop_th"];
    spatialanalysis_th [label = <<B>R</B><br />Spatial Analysis_th<br />spatstat, K, L, H<br />(spatialanalysis.R)>, 
                        shape = box, style=filled
                        color=sandybrown];
    spatialdata_th [label = "spatialdata_th\n(.csv)\n Var: K_r, L_r, H_r\n./spacialdata"];
    spatialdata_bi_th [label = "spatialdata_bi_th\n(.rda)\n./spacialdata_bi"];
    plot_spatialdata_th [label = <<B>Python</B><br />Plot spatialdata_th<br />(plot_spatialdata.py)>, 
                        shape = box, style=filled,
                        color=PaleGreen];
    plot_K_th [label = "Plot K_r TH\n(.png)\n./plot_K"];
    plot_L_th [label = "Plot L_r TH\n(.png)\n./plot_L"];
    plot_H_th [label = "Plot H_r TH\n(.png)\n./plot_H"];
    plot_total_th [label = "Plot Summary TH\n(.png)\n./plot_total"];
    //filter data with threshold and make plot and match the file
    STORMdata_sliced_th_match [label = "STORM_data\nsliced_Threshold_match\n./csvdata_crop_th_match"]
    spatialanalysis_th_match [label = <<B>R</B><br />Spatial Analysis_th<br />match<br />spatstat, K, L, H<br />(spatialanalysis.R)>, 
                                shape = box, style=filled
                                color=sandybrown];
    spatialdata_th_match [label = "spatialdata_th\nmatch\n(.csv)\n Var: K_r, L_r, H_r\n./spacialdata"];
    spatialdata_bi_th_match [label = "spatialdata_bi_th\nmatch\n(.rda)\n./spacialdata_bi"];
    plot_spatialdata_th_match [label = <<B>Python</B><br />Plot spatialdata_th<br />match<br />(plot_spatialdata.py)>, 
                                shape = box, style=filled,
                                color=PaleGreen];
    plot_K_th_match [label = "Plot K_r TH\nmatch\n(.png)\n./plot_K"];
    plot_L_th_match [label = "Plot L_r TH\nmatch\n(.png)\n./plot_L"];
    plot_H_th_match [label = "Plot H_r TH\nmatch\n(.png)\n./plot_H"];
    plot_total_th_match [label = "Plot Summary TH\nmatch\n(.png)\n./plot_total"];
    //CBC analysis; thresholded match data\
    CBC_analysis_th_match [label = <<B>Fiji</B><br />CBC Analysis<br />match<br />(CBC_th_match.py)>, 
                            shape = box, style=filled,
                            color=lightblue];
    CBC_results_th_match [label = "CBC results\n.csv\n.CBC_results"];
    //data inference; thresholded match data (only CBC)
    data_inference_cbc_th_match [label = <<B>Python</B><br />data_inf<br />CBC_th_match<br />(data_inference_cbc_th_match.py)>, 
                                    shape = box, style=filled,
                                    color=PaleGreen];
    CBC_histogram_th_match [label = "CBC Histo\n./CBC_histogram_th_match"];
    CBC_histogram_summary_th_match [label = "CBC Histo\n./CBC_histogram_summary_th_match"];
    
    //LocalL Analysis and plot
    spacialanalysis_localL [label = <<B>R</B><br />LocalL<br />(spacialanalysis_localL.R)>, 
                            shape = box, style=filled,
                            color=sandybrown];
    spacialdata_local [label = "local\n./spacialdata_local"];
    localL_interpolation [label = <<B>MATLAB</B><br />LocalL Interpolation<br />(localL_interpolation.m)>, 
                            shape = box, style=filled,
                            color=aquamarine];
    spacialdata_local_int [label = "local_grid\n./spacialdata_local_int"];
    plot_localL [label = <<B>Python</B><br />Plot LocalL<br />(plot_localL.py)>, 
                    shape = box, style=filled,
                    color=PaleGreen];
    spacialdata_local_grid [label = "Grid Plot \nfor local_grid\n./spacialdata_local_grid"];
    spacialdata_local_scatter [label = "Scatter Plot \nfor local_grid\n./spacialdata_local_scatter"];

    //create pad crop file
    csv_slicer_crop_pad [label = <<B>Python</B><br />Sliced by R with pad value<br /> 3 pixle per side<br />(csv_slicer_crop_pad.py)>, 
                    shape = box, style=filled,
                    color=PaleGreen];
    csvdata_crop_pad [label = "STORM_data\nsliced_R_pad\n./csvdata_crop_pad"]
    
    //LocalL Analysis and plot; pad
    spacialanalysis_localL_pad [label = <<B>R</B><br />LocalL<br />pad<br />(spacialanalysis_localL_pad.R)>, 
                            shape = box, style=filled,
                            color=sandybrown];
    spacialdata_local_pad [label = "local\n./spacialdata_local_pad"];
    localL_interpolation_pad [label = <<B>MATLAB</B><br />LocalL Interpolation<br />pad<br />(localL_interpolation_pad.m)>, 
                            shape = box, style=filled,
                            color=aquamarine];
    spacialdata_local_pad_int [label = "local_grid\n./spacialdata_local_pad_int"];
    plot_localL_pad [label = <<B>Python</B><br />Plot LocalL<br />pad<br />(plot_localL_pad.py)>, 
                    shape = box, style=filled,
                    color=PaleGreen];
    spacialdata_local_pad_grid [label = "Grid Plot \nfor local_grid\n./spacialdata_local_pad_grid"];
    spacialdata_local_pad_scatter [label = "Scatter Plot \nfor local_grid\n./spacialdata_local_pad_scatter"];

    

    //edges
    //preprocessing
    rawimg -> img_prepro;
    img_prepro -> {preproimg imgintensity imgmetadata imgstat};
    
    //tSTORM analysis
    preproimg -> tstormanalysis; 
    tstormanalysis -> STORMdata; 
    STORMdata -> slicer_t;
    slicer_t -> STORMdata_sliced_T;
    {STORMdata_sliced_T, cropsize} -> slicer_r;
    slicer_r -> STORMdata_sliced_R;
    
    //spacial analysis
    STORMdata_sliced_R -> spatialanalysis;
    spatialanalysis -> {spatialdata spatialdata_bi};

    //spacial analysis plot
    spatialdata -> plot_spatialdata;
    plot_spatialdata -> {plot_K plot_L, plot_H, plot_total};
    
    //CBC analysis
    STORMdata_sliced_R -> CBC_analysis
    CBC_analysis -> CBC_results

    //data inference
    STORMdata_sliced_R -> data_inference_photon;
    data_inference_photon -> {photons_hist photons_hist_summary};
    CBC_results -> data_inference_cbc;
    data_inference_cbc -> {CBC_histogram CBC_histogram_summary};

    //filter data with threshold and make plot
    {photons_hist_summary STORMdata_sliced_R} -> slicer_threshold;
    slicer_threshold -> {STORMdata_sliced_th STORMdata_sliced_th_match};
    STORMdata_sliced_th -> spatialanalysis_th;
    spatialanalysis_th -> {spatialdata_th, spatialdata_bi_th};
    spatialdata_th -> plot_spatialdata_th;
    plot_spatialdata_th -> {plot_K_th plot_L_th plot_H_th plot_total_th};

    //filter data with threshold and make plot and match the file
    STORMdata_sliced_th_match -> spatialanalysis_th_match;
    spatialanalysis_th_match -> spatialdata_th_match;
    spatialanalysis_th_match -> spatialdata_bi_th_match;
    spatialdata_th_match -> plot_spatialdata_th_match;
    plot_spatialdata_th_match -> {plot_K_th_match plot_L_th_match plot_H_th_match plot_total_th_match};

    //CBC analysis
    STORMdata_sliced_th_match -> CBC_analysis_th_match;
    CBC_analysis_th_match -> CBC_results_th_match;
    
    //data inference; CBC
    CBC_results_th_match -> data_inference_cbc_th_match;
    data_inference_cbc_th_match -> {CBC_histogram_th_match CBC_histogram_summary_th_match};

    //LocalL Analysis and plot
    STORMdata_sliced_R -> spacialanalysis_localL;
    spacialanalysis_localL -> spacialdata_local;
    spacialdata_local -> localL_interpolation;
    localL_interpolation -> spacialdata_local_int;
    {spacialdata_local, spacialdata_local_int} -> plot_localL;
    plot_localL -> {spacialdata_local_grid, spacialdata_local_scatter};

    //create pad crop file
    {STORMdata_sliced_T, cropsize} -> csv_slicer_crop_pad;
    csv_slicer_crop_pad -> csvdata_crop_pad;

    //LocalL Analysis and plot; pad
    csvdata_crop_pad -> spacialanalysis_localL_pad;
    spacialanalysis_localL_pad -> spacialdata_local_pad;
    spacialdata_local_pad -> localL_interpolation_pad;
    localL_interpolation_pad -> spacialdata_local_int_pad;
    {spacialdata_local_pad, spacialdata_local_pad_int} -> plot_localL_pad;
    plot_localL_pad -> {spacialdata_local_pad_grid, spacialdata_local_pad_scatter};
    
}
